{"version":3,"sources":["API.tsx","components/QuestionCard.styles.ts","components/QuestionCards.tsx","utils.tsx","App.tsx","index.tsx"],"names":["Difficulty","ButtonWrapper","styled","div","correct","userClicked","QuestionCards","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","nextQuestion","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.862326b7.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","import styled from \"styled-components\";\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct ? \"#b0b742\" : !correct && userClicked ? \"#872233\" : \"#281f62\"};\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { ButtonWrapper } from \"./QuestionCard.styles\";\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\nconst QuestionCards: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <p className=\"number text-white font-bold\">\r\n        Question : {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p\r\n        dangerouslySetInnerHTML={{ __html: question }}\r\n        className=\"text-gray-300 text-2xl my-4\"\r\n      />\r\n      <div className=\"flex flex-col justify-center items-center\">\r\n        {answers.map((answer) => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button\r\n              disabled={userAnswer ? true : false}\r\n              value={answer}\r\n              onClick={callback}\r\n              className=\"px-3 py-1 m-2 text-white rounded-lg hover:bg-gray-700\"\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionCards;\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import React, { useState } from \"react\";\nimport QuestionCards from \"./components/QuestionCards\";\nimport { fetchQuizQuestions } from \"./API\";\n// Types\nimport { Difficulty, QuestionState } from \"./API\";\n\n// Total questions\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0); // the current question Number user is on\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n  const nextQuestion = async () => {\n    // move to next question if not last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n  return (\n    <div className=\" mx-auto p-4 h-screen flex flex-col justify-center items-center\">\n      <div className=\"text-center \">\n        <h1 className=\" text-6xl text-accent_2 mt-2\">Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button\n            className=\"start text-accent_2 text-lg px-4 py-1 mx-2 rounded-lg btn bg-accent_1 my-8\"\n            onClick={startTrivia}\n          >\n            Begin Quiz\n          </button>\n        ) : null}\n        {!gameOver ? (\n          <p className=\"text-4xl text-accent_2 my-4\">Score : {score} </p>\n        ) : null}\n\n        {loading && <p className=\" text-6xl text-accent_2 my-8\">Loading :</p>}\n      </div>\n\n      {!loading && !gameOver && (\n        <QuestionCards\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!gameOver &&\n      !loading &&\n      userAnswers.length === number + 1 &&\n      number !== TOTAL_QUESTIONS - 1 ? (\n        <button\n          className=\"next text-accent_2 text-lg my-2 px-3 mx-2 py-1/2 bg-accent_1 rounded-md btn\"\n          onClick={nextQuestion}\n        >\n          Next\n        </button>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}